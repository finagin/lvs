version: '3'

services:

    traefik:
        image: traefik:${LVS_TRAEFIK_VERSION:-3.0}
        container_name: traefik
        labels:
            - 'traefik.enable=true'
            - 'traefik.http.routers.traefik.rule=Host(`traefik.${LVS_DOMAIN:-test}`)'
            - 'traefik.http.routers.traefik.entrypoints=web'
            - 'traefik.http.routers.traefik.service=api@internal'
            - 'traefik.http.services.traefik.loadbalancer.server.port=8080'
        restart: unless-stopped
        environment:
            CF_DNS_API_TOKEN: '${LVS_CLOUDFLARE_TOKEN:-""}'
            CF_ZONE_API_TOKEN: '${LVS_CLOUDFLARE_TOKEN:-""}'
        ports:
            - '80:80'
            - '443:443'
        extra_hosts:
            - 'host.docker.internal:host-gateway'
        command:
            - '--api=true'
            - '--log=true'
            - '--log.level=${LVS_LOG_LEVEL:-ERROR}'
            - '--accesslog=true'
            - '--ping=true'
            - '--ping.entryPoint=web'

            - '--metrics.prometheus=true'
            - '--metrics.prometheus.buckets=0.1,0.3,1.2,5.0,10.0'
            - '--metrics.prometheus.entrypoint=web'

            - '--providers.docker=true'
            - '--providers.docker.network=traefik'
            - '--providers.docker.network=${COMPOSE_PROJECT_NAME}_lvs'
            - '--providers.docker.defaultRule=Host(`{{ coalesce (index .Labels "com.docker.compose.project") (normalize .Name) }}.${LVS_DOMAIN:-test}`)'
            - '--providers.docker.exposedByDefault=false'
            - '--providers.docker.httpClientTimeout=900'

            - '--entrypoints.web=true'
            - '--entrypoints.web.address=:80'

            # <editor-fold desc="Let's encrypt">
            # Note: Uncomment everything below if you need https
            #- '--entrypoints.web.http.redirections.entrypoint.permanent=false'
            #- '--entrypoints.web.http.redirections.entrypoint.to=websecure'
            #- '--entrypoints.websecure=true'
            #- '--entrypoints.websecure.address=:443'
            #- '--entrypoints.websecure.http.tls=true'
            #- '--entrypoints.websecure.http.tls.certresolver=leresolver'
            #- '--entrypoints.websecure.http.tls.domains[0].main=${LVS_DOMAIN:-test}'
            #- '--entrypoints.websecure.http.tls.domains[0].sans=*.${LVS_DOMAIN:-test}'
            #- '--certificatesresolvers.leresolver=true'
            #- '--certificatesresolvers.leresolver.acme.email=${LVS_LETSENCRYPT_EMAIL:-"admin@example.com"}'
            #- '--certificatesresolvers.leresolver.acme.caServer=${LVS_LETSENCRYPT_SERVER:-"https://acme-staging-v02.api.letsencrypt.org/directory"}'
            #- '--certificatesresolvers.leresolver.acme.storage=/letsencrypt/acme-v2.json'
            #- '--certificatesresolvers.leresolver.acme.tlschallenge=false'
            #- '--certificatesresolvers.leresolver.acme.dnschallenge=true'
            #- '--certificatesresolvers.leresolver.acme.dnschallenge.delaybeforecheck=15'
            #- '--certificatesresolvers.leresolver.acme.dnschallenge.provider=cloudflare'
            #- '--certificatesresolvers.leresolver.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53'
            # </editor-fold>
        volumes:
            - '/var/run/docker.sock:/var/run/docker.sock:ro'
            - '${LVS_CERTS:-traefik_letsencrypt}:/letsencrypt:Z'
        networks:
            - traefik
            - lvs
        healthcheck:
            test: [ "CMD", "wget", "--no-verbose", "--spider", "http://healthcheck.${LVS_DOMAIN:-test}/ping" ]
            retries: 3
            timeout: 5s

    # <editor-fold desc="Management">
    portainer:
        image: portainer/portainer-ce:${LVS_PORTAINER_VERSION:-2.19.4}-alpine
        container_name: portainer
        labels:
            - 'traefik.enable=true'
            - 'traefik.http.routers.portainer.rule=Host(`portainer.${LVS_DOMAIN:-test}`)'
            - 'traefik.http.routers.portainer.entrypoints=web'
            - 'traefik.http.services.portainer.loadbalancer.server.port=9000'
        restart: unless-stopped
        extra_hosts:
            - 'host.docker.internal:host-gateway'
        volumes:
            - '/var/run/docker.sock:/var/run/docker.sock'
            - 'portainer-data:/data'
        networks:
            - lvs
        profiles:
            - all
            - portainer
            - management

    registry:
        image: registry:${LVS_REGISTRY_VERSION:-2.8}
        container_name: registry
        labels:
            - 'traefik.enable=true'
            - 'traefik.http.routers.registry.rule=Host(`registry.${LVS_DOMAIN:-test}`)'
            - 'traefik.http.routers.registry.entrypoints=web'
            - 'traefik.http.services.registry.loadbalancer.server.port=5000'
        restart: unless-stopped
        volumes:
            - 'registry-data:/var/lib/registry'
        networks:
            - lvs
        profiles:
            - all
            - registry
            - management

    registry-hub:
        image: konradkleine/docker-registry-frontend:${LVS_REGISTRY_HUB_VERSION:-v2}
        container_name: registry-hub
        labels:
            - 'traefik.enable=true'
            - 'traefik.http.routers.portainer.rule=Host(`hub.registry.${LVS_DOMAIN:-test}`)'
            - 'traefik.http.routers.portainer.entrypoints=web'
        restart: unless-stopped
        environment:
            ENV_DOCKER_REGISTRY_HOST: 'registry'
            ENV_DOCKER_REGISTRY_PORT: 5000
            ENV_MODE_BROWSE_ONLY: true
        networks:
            - lvs
        profiles:
            - all
            - registry
            - management
    # </editor-fold>

    # <editor-fold desc="Metrics">
    prometheus:
        image: prom/prometheus:${LVS_PROMETHEUS_VERSION:-v2.49.1}
        container_name: prometheus
        labels:
            - 'traefik.enable=true'
            - 'traefik.http.routers.prometheus.rule=Host(`prometheus.${LVS_DOMAIN:-test}`)'
            - 'traefik.http.routers.prometheus.entrypoints=web'
            - 'traefik.http.services.prometheus.loadbalancer.server.port=9090'
        networks:
            - lvs
        profiles:
            - all
            - prometheus
            - metrics
    # </editor-fold>

    # <editor-fold desc="Sentry">
    sentry-base: &sentry-base
        image: sentry:${LVS_SENTRY_VERSION:-9.1}
        environment:
            SENTRY_SECRET_KEY: '${LVS_SENTRY_SECRET_KEY:-""}'
            SENTRY_REDIS_HOST: sentry-redis
            SENTRY_POSTGRES_HOST: sentry-postgres
            SENTRY_DB_USER: '${LVS_SENTRY_DB_USERNAME:-sentry}'
            SENTRY_DB_PASSWORD: '${LVS_SENTRY_DB_PASSWORD:-sentry}'
        networks:
            - lvs-sentry
        depends_on:
            - sentry-redis
            - sentry-postgres
        profiles:
            - never
    sentry:
        << : *sentry-base
        container_name: sentry
        labels:
          - 'traefik.enable=true'
          - 'traefik.http.routers.sentry.rule=Host(`sentry.${LVS_DOMAIN:-test}`)'
          - 'traefik.http.routers.sentry.entrypoints=web'
        networks:
            - lvs
            - lvs-sentry
        profiles:
            - all
            - logging
            - sentry
    sentry-redis:
        image: redis:${LVS_SENTRY_REDIS_VERSION:-7.2}-alpine
        container_name: sentry-redis
        volumes:
            - '${LVS_SENTRY_REDIS_VOLUME:-sentry-redis}:/data'
        networks:
            - lvs-sentry
        profiles:
            - all
            - logging
            - sentry
    sentry-postgres:
        image: postgres:${LVS_SENTRY_POSTGRES_VERSION:-16.1}-alpine
        container_name: sentry-postgres
        environment:
            POSTGRES_USER: '${LVS_SENTRY_DB_USERNAME:-sentry}'
            POSTGRES_PASSWORD: '${LVS_SENTRY_DB_PASSWORD:-sentry}'
        volumes:
            - '${LVS_SENTRY_DB_VOLUME:-sentry-postgres}:/var/lib/postgresql/data'
        networks:
            - lvs-sentry
        profiles:
            - all
            - logging
            - sentry
    sentry-cron:
        << : *sentry-base
        container_name: sentry-cron
        command: [ 'sentry', 'run', 'cron' ]
        profiles:
            - all
            - logging
            - sentry
    sentry-worker:
        << : *sentry-base
        container_name: sentry-worker
        command: [ 'sentry', 'run', 'worker' ]
        profiles:
            - all
            - logging
            - sentry
    # </editor-fold>

volumes:
    portainer-data:
        driver: local
    registry-data:
        driver: local
    sentry-redis:
        driver: local
    sentry-postgres:
        driver: local
    traefik_letsencrypt:
        driver: local

networks:
    lvs:
        driver: bridge
    lvs-sentry:
        driver: bridge
    traefik:
        external: true
