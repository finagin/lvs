version: '3'

services:

  traefik:
    image: traefik:2.5
    container_name: traefik
    command:
      - '--api=true'
      - '--api.insecure=true'
      - '--log=true'
      - '--log.level=${LVS_LOG_LEVEL:-ERROR}'
      - '--accesslog=true'
      - '--ping=true'

      - '--metrics.prometheus=true'
      - '--metrics.prometheus.addrouterslabels=true'

      - '--providers.docker=true'
      - '--providers.docker.defaultRule=Host(`{{ coalesce (index .Labels "com.docker.compose.project") (normalize .Name) }}.${LVS_DOMAIN:-test}`)'
      - '--providers.docker.exposedbydefault=false'
      - '--providers.docker.network=traefik'

      - '--entrypoints.web=true'
      - '--entrypoints.web.address=:80'
       
      # Note: Delete everything below if you don't need https
      
      - '--entrypoints.web.http.redirections.entrypoint.permanent=false'
      - '--entrypoints.web.http.redirections.entrypoint.to=websecure'

      - '--entrypoints.websecure=true'
      - '--entrypoints.websecure.address=:443'
      - '--entrypoints.websecure.http.tls=true'
      - '--entrypoints.websecure.http.tls.certresolver=leresolver'
      - '--entrypoints.websecure.http.tls.domains[0].main=${LVS_DOMAIN:-test}'
      - '--entrypoints.websecure.http.tls.domains[0].sans=*.${LVS_DOMAIN:-test}'

      - '--certificatesresolvers.leresolver=true'
      - '--certificatesresolvers.leresolver.acme.email=${LVS_LETSENCRYPT_EMAIL:-"admin@example.com"}'
      - '--certificatesresolvers.leresolver.acme.caServer=${LVS_LETSENCRYPT_SERVER:-"https://acme-staging-v02.api.letsencrypt.org/directory"}'
      - '--certificatesresolvers.leresolver.acme.storage=/letsencrypt/acme-v2.json'
      - '--certificatesresolvers.leresolver.acme.tlschallenge=false'
      - '--certificatesresolvers.leresolver.acme.dnschallenge=true'
      - '--certificatesresolvers.leresolver.acme.dnschallenge.delaybeforecheck=15'
      - '--certificatesresolvers.leresolver.acme.dnschallenge.provider=cloudflare'
      - '--certificatesresolvers.leresolver.acme.dnschallenge.resolvers=1.1.1.1:53,8.8.8.8:53'
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.traefik.rule=Host(`traefik.${LVS_DOMAIN:-test}`)'
      - 'traefik.http.routers.traefik.service=api@internal'
      - 'traefik.http.services.traefik.loadbalancer.server.port=8080'
    restart: always
    environment:
      CF_DNS_API_TOKEN: '${LVS_CLOUDFLARE_TOKEN}'
      CF_ZONE_API_TOKEN: '${LVS_CLOUDFLARE_TOKEN}'
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock:ro'
      - 'traefik_letsencrypt:/letsencrypt'
    ports:
      - '80:80'
      - '443:443'
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    networks:
      - traefik

  portainer:
    image: portainer/portainer-ce:2.6.2-alpine
    container_name: portainer
    profiles:
      - all
      - portainer
      - management
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.portainer.rule=Host(`portainer.${LVS_DOMAIN:-test}`)'
      - 'traefik.http.routers.portainer.entrypoints=websecure'
      - 'traefik.http.services.portainer.loadbalancer.server.port=9000'
    restart: always
    extra_hosts:
      host.docker.internal: host-gateway
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
      - 'portainer_data:/data'
    networks:
      - traefik

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    profiles:
      - all
      - prometheus
      - metrics
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.prometheus.rule=Host(`prometheus.${LVS_DOMAIN:-test}`)'
      - 'traefik.http.routers.prometheus.entrypoints=websecure'
      - 'traefik.http.routers.prometheus.tls=true'
      - 'traefik.http.services.prometheus.loadbalancer.server.port=9090'
    networks:
      - traefik

volumes:
  portainer_data:
  traefik_letsencrypt:

networks:
  traefik:
    external: true
